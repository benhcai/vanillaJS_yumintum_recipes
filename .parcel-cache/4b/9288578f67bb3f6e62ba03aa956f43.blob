var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "state", ()=>state
);
parcelHelpers.export(exports, "getRecipe", ()=>getRecipe
);
parcelHelpers.export(exports, "loadSearchResults", ()=>loadSearchResults
);
parcelHelpers.export(exports, "loadSearchResultsPage", ()=>loadSearchResultsPage
);
var _config = require("./config");
var _helper = require("./helper");
const state = {
    myrecipe: {
    },
    search: {
        query: "",
        results: [],
        resultsPerPage: _config.RESULTS_PER_PAGE
    }
};
const getRecipe = async function(url) {
    try {
        // Fetch recipes based on url function parameter
        const data = await _helper.getJSON(`${_config.API_URL}${url}`);
        const dataParsed = data.data.recipe;
        // Create new object with new keys
        state.myrecipe = {
            id: dataParsed.id,
            title: dataParsed.title,
            publisher: dataParsed.publisher,
            sourceUrl: dataParsed.source_url,
            image: dataParsed.image_url,
            ingredients: dataParsed.ingredients,
            servings: dataParsed.servings,
            cookingTime: dataParsed.cooking_time
        };
        return state.myrecipe;
    } catch (err) {
        console.log("model: ", err);
        throw err;
    }
};
const loadSearchResults = async function(query) {
    try {
        state.search.query = query;
        const result = await _helper.getJSON(`https://forkify-api.herokuapp.com/api/v2/recipes?search=${query}`);
        const recipesParsed = result.data.recipes;
        state.search.results = recipesParsed.map((recipe)=>{
            return {
                id: recipe.id,
                title: recipe.title,
                publisher: recipe.publisher,
                image: recipe.image_url
            };
        });
        console.log("repparsed", state);
    } catch (err) {
        throw err;
    }
};
const loadSearchResultsPage = function(page) {
    const start = (page - 1) * state.search.resultsPerPage;
    const end = page * state.search.resultsPerPage;
    console.log("loadpage", state.search.results);
    console.log("loadpage", state.search.results.slice(start, end));
    return state.search.results.slice(start, end);
};
