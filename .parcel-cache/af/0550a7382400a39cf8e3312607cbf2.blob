var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _view = require("./View");
var _viewDefault = parcelHelpers.interopDefault(_view);
var _fractional = require("fractional");
class ViewRecipe extends _viewDefault.default {
    _parentElement = document.querySelector(".recipe");
    _errorMessage = "The recipe was not found. It may have been moved or deleted, please try a different URL address.";
    _successMessage = "success!";
    // R2. Publish: hashchange occured or load occured event.
    addHandlerRender(handler) {
        [
            "hashchange",
            "load"
        ].forEach((ev)=>{
            return window.addEventListener(ev, handler);
        });
    }
    addHandlerUpdateServings(handler) {
    }
    // R6. Render document (markup) inside this view component
    // inherited render(data)
    _generateMarkup() {
        return `\n    <figure class="recipe__fig">\n      <img src="${this._data.image}" alt="${this._data.title}" class="recipe__img" />\n      <h1 class="recipe__title">\n        <span>${this._data.title}</span>\n      </h1>\n    </figure>\n\n    <div class="recipe__details">\n      <div class="recipe__info">\n        <svg class="recipe__info-icon">\n          <use href="${this.icons}#icon-clock"></use>\n        </svg>\n        <span class="recipe__info-data recipe__info-data--minutes">${this._data.cookingTime}</span>\n        <span class="recipe__info-text">minutes</span>\n      </div>\n      <div class="recipe__info">\n        <svg class="recipe__info-icon">\n          <use href="${this.icons}#icon-users"></use>\n        </svg>\n        <span class="recipe__info-data recipe__info-data--people">${this._data.servings} </span>\n        <span class="recipe__info-text">SERVINGS</span>\n\n        <div class="recipe__info-buttons">\n          <button class="btn--tiny btn--increase-servings">\n            <svg>\n              <use href="${this.icons}#icon-minus-circle"></use>\n            </svg>\n          </button>\n          <button class="btn--tiny btn--increase-servings">\n            <svg>\n              <use href="${this.icons}#icon-plus-circle"></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      \n      <div class="recipe__user-generated">\n      <!--\n        <svg>\n          <use href="${this.icons}#icon-user"></use>\n        </svg>\n        -->\n      </div>\n      <button class="btn--round">\n        <svg class="">\n          <use href="${this.icons}#icon-bookmark-fill"></use>\n        </svg>\n      </button>\n    </div>\n\n    <div class="recipe__ingredients">\n        <h2 class="heading--2">RecipeView ingredients}</h2>\n        <ul class="recipe__ingredient-list">\n        ${this._data.ingredients.map((ing)=>this._generateIngredients(ing)
        ).join("")}\n        </ul>\n    </div>\n\n    <div class="recipe__directions">\n      <h2 class="heading--2">How to cook it</h2>\n      <p class="recipe__directions-text">\n        This recipe was carefully designed and tested by\n        <span class="recipe__publisher">${this._data.publisher}</span>. Please check out\n        directions at their website.\n      </p>\n      <a\n        class="btn--small recipe__btn"\n        href="${this._data.sourceUrl}"\n        target="_blank"\n      >\n        <span>Directions</span>\n        <svg class="search__icon">\n          <use href="${this.icons}#icon-arrow-right"></use>\n        </svg>\n      </a>\n    </div>\n    `;
    }
    _generateIngredients(ing) {
        return `\n      <li class="recipe__ingredient">\n      <svg class="recipe__icon">\n          <use href="${this.icons}#icon-check"></use>\n      </svg>\n      <div class="recipe__quantity">\n        ${ing.quantity ? new _fractional.Fraction(ing.quantity.toFixed(1)) : ""}\n      </div>\n      <div class="recipe__description">\n          <span class="recipe__unit">${ing.unit}</span>\n          ${ing.description}\n      </div>\n      </li>\n      `;
    }
}
exports.default = new ViewRecipe();
