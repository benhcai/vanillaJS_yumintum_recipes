var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
var _model = require("./model");
var _viewRecipe = require("./views/viewRecipe");
var _viewRecipeDefault = parcelHelpers.interopDefault(_viewRecipe);
var _viewSearch = require("./views/viewSearch");
var _viewSearchDefault = parcelHelpers.interopDefault(_viewSearch);
var _viewSearchResults = require("./views/viewSearchResults");
var _viewSearchResultsDefault = parcelHelpers.interopDefault(_viewSearchResults);
// Parcel hotswapping
if (module.hot) module.hot.accept();
const controlRecipes = async function() {
    try {
        // R3. Get URL ID from window
        const id = window.location.hash.slice(1);
        if (!id) throw new Error("ID not found");
        // 0. Recipe loading spinner
        _viewRecipeDefault.default.renderSpinner();
        // R4. Send ID to model and wait for recipe
        let myrecipe = await _model.getRecipe(id);
        // R5. Send recipe to View[recipe]
        _viewRecipeDefault.default.render(myrecipe); // could instead use model.state.myrecipe and remove return from model
    } catch (err) {
        console.log(err);
        _viewRecipeDefault.default.renderError();
    }
};
const controlSearchResults = async function(queryParam = _viewSearchDefault.default.getQuery()) {
    try {
        _viewSearchResultsDefault.default.renderSpinner();
        // S3. controlSearchResult gets the search query (input data)
        const query = queryParam;
        if (!query) return;
        // S4. Send query to model and load search results
        await _model.loadSearchResults(query);
        // S5. Render result
        console.log(_model.state.search); // S5. Send to View to handle retrieved data
        // Display a list of marked up divs in the results section
        _viewSearchResultsDefault.default.render(_model.state.search);
    } catch (err) {
        console.log("controlSearch", err);
    }
};
const init = function() {
    console.clear();
    console.log("console msg inti");
    _viewRecipeDefault.default.addHandlerRender(controlRecipes); // R1. controlRecipes subscribes to ViewRecipe
    controlSearchResults("yummy");
    _viewSearchDefault.default.addHandlerSearch(controlSearchResults); // S1. controlSearchResult subscribes to ViewSearch[hanlder]
};
init();
