var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _stable = require("core-js/stable");
var _runtime = require("regenerator-runtime/runtime");
var _model = require("./model");
var _viewRecipe = require("./views/viewRecipe");
var _viewRecipeDefault = parcelHelpers.interopDefault(_viewRecipe);
var _viewSearch = require("./views/viewSearch");
var _viewSearchDefault = parcelHelpers.interopDefault(_viewSearch);
var _viewSearchResults = require("./views/viewSearchResults");
var _viewSearchResultsDefault = parcelHelpers.interopDefault(_viewSearchResults);
var _viewPagination = require("./views/viewPagination");
var _viewPaginationDefault = parcelHelpers.interopDefault(_viewPagination);
// Parcel hotswapping
// if (module.hot) {
//   module.hot.accept();
// }
const controlRecipes = async function() {
    try {
        // R3. Get URL ID from window
        const id = window.location.hash.slice(1);
        if (!id) throw new Error("ID not found");
        // 0. Recipe loading spinner
        _viewRecipeDefault.default.renderSpinner();
        // R4. Send ID to model and wait for recipe
        let myrecipe = await _model.getRecipe(id);
        // R5. Send recipe to View[recipe]
        _viewRecipeDefault.default.render(myrecipe); // could instead use model.state.myrecipe and remove return from model
    } catch (err) {
        console.log(err);
        _viewRecipeDefault.default.renderError();
    }
};
// Control processing and rendering search results
const controlSearchResults = async function(myquery) {
    try {
        _viewSearchResultsDefault.default.renderSpinner();
        // S3. controlSearchResult gets the search query (input data)
        let query = _viewSearchDefault.default.getQuery();
        if (!query) {
            query = myquery;
            console.log("query empty", query);
        }
        // S4. Send query to model and load results based on search query
        await _model.loadSearchResults(query);
        // S5. Send list of recipes to View (ViewSearchResults & ViewPagination) to handle retrieved data
        controlPagination(1); // start on page 1
        // Highlight active recipe
        _viewSearchResultsDefault.default.listenForActive();
    } catch (err) {
        console.log("controlSearch", err);
    }
};
// Control render of search results and page buttons
const controlPagination = function(page) {
    console.log("controlPagin.:", page);
    // render clears the previous results
    _viewSearchResultsDefault.default.render(_model.loadSearchResultsPage(page));
    _viewPaginationDefault.default.render(_model.state.search);
};
// Control increase/decrease of servings
const controlServings = function(newServings) {
    _model.updateServings(newServings);
    // ViewRecipe.render(model.state.myrecipe);
    _viewRecipeDefault.default.update(_model.state.myrecipe);
};
const init = function() {
    console.clear();
    console.log("---App started from init--");
    _viewRecipeDefault.default.addHandlerRender(controlRecipes); // R1. controlRecipes subscribes to ViewRecipe
    _viewRecipeDefault.default.addHandlerUpdateServings(controlServings);
    controlSearchResults("egg"); // Initialise search results so it's not empty
    _viewSearchDefault.default.addHandlerSearch(controlSearchResults); // S1. controlSearchResult subscribes to ViewSearch[hanlder]
    _viewPaginationDefault.default.addHandlerClick(controlPagination);
};
init();
